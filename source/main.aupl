class Main

public static int x

static void main() {
	volatile int x = 5 + 6 + 7 * 8
	volatile int y = 4 + 5 + 6 + 3
	volatile int z = x + y
	volatile int w = z
	non_static()
}

static void add(int a, int b) = a + b

void non_static() = 0


/*
    main() // &x == fp[0], &y == fp[8], &z == fp[10]
        // z = add(x, y)
        GROW 28
            // may allocate new chunk for stack -> sp in new chunk, fp in old chunk
            // fp and sp can now be in completely different memory locations
            // caller vars can only be accessed with fp
            // callee vars can only be accessed with sp
            // ip   sp[-20] -> fp[-18]  placeholder for ip
            // fp   sp[-18] -> fp[-10]  placeholder for fp
            // r    sp[-10] -> fp[-8]   placeholder for return value address
            // a    sp[-08] -> fp[0]
            // b    sp[-00] -> fp[8]
        STORE sp[-8], fp[0] // require additional instructions
        STORE sp[-0], fp[8]
        CALL add 10
            sp[-10-10] = ip
            sp[-10-08] = fp
            sp[-10-00] = fp[10]
            ip = &add
            fp = sp - 18
        STORE fp[10], sp[-10] // require additional instructions
        DISCARD_VAR 20 // shrink stack
    add(a, b) // &t == fp[10], &a == fp[0], $b == fp[8]
        // return a + b
        ADD fp[10], fp[0], fp[8] // t = a + b
        RET // return t
            r = fp[-8]
            
            ip = fp[0]
            fp = fp[8]
*/